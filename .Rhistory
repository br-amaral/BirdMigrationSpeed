library(INLA)
library(tidyverse)
library(glue)
species <- "BHVI"
offsets <- 2
mod <- 1
setwd("~/Documents/BirdHWA_nospaceonedrive")
set.seed(10)
SPECIES_DATA_PATH <- "data/src/sps_list.csv"
source("5_formulasModels.R")
source("5_formulasModels.R")
sps_list <- read_csv(SPECIES_DATA_PATH)
hex.adj <- paste0(getwd(),"/data/hexmap.graph")
formula <- get(glue("formula{mod}"))
create_data_sensi <- function(offset2, BIRDx) {
off <- offset2
## Create an year offset for that species ------------------
BIRDx <- BIRDx %>%
# year_offset is standardizing yrhwa to the offset (years after infestation to the impact)
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + off, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset < off, 0, ifelse(year_offset >= off, 1, NA)))
rout_notinf <- BIRDx %>%
select(RouteId, Year, YearInfested, Infested) %>%
filter(YearInfested == 0) %>%
distinct() %>%
group_by(RouteId) %>%
mutate(maxYear = max(Year)) %>%
select(RouteId, maxYear) %>%
distinct()
## if a route was never infested, year_offset is 'equal' to the last year it was sampled
for(i in 1:nrow(BIRDx)){
if(BIRDx$YearInfested[i] == 0){
off_noin <- rout_notinf[which(rout_notinf$RouteId == BIRDx$RouteId[i]), 2]
BIRDx$year_offset[i] <- BIRDx$Year[i] - as.numeric(off_noin) + off - 1
}
}
## all filters ----------------------------
BIRDx1 <- BIRDx %>%
filter(YearInfested != 0,                               # only routes that were infested at some point
year_offset > -20 & year_offset < 20) %>%        # look only +-20 years before/after infestation
group_by(RouteId) %>%
group_split()
for(i in 1:length(BIRDx1)){                               # look only at routes that were infested for at least 10 years
a <- BIRDx1[[i]]
maxi <- max(a$year_offset)
if(maxi < 10) {BIRDx1[[i]] <- NULL }
}
BIRDx2_1 <- data.table::rbindlist(BIRDx1) %>%
as_tibble()
return(BIRDx2_1)
}
create_data_sensi <- function(offset2, BIRDx) {
off <- offset2
## Create an year offset for that species ------------------
BIRDx <- BIRDx %>%
# remove 20 ears before and after infestation
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested, 0)) %>%
filter(year_offset > -20 & year_offset < 20) %>%
# Only routes infested for at least 10 years
group_by(RouteId) %>%
mutate(max = max(year_offset)) %>%
filter(max > 9) %>%
ungroup() %>%
# year_offset is standardizing yrhwa to the offset (years after infestation to the impact) ADDING THE LAG
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + offset, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset <= 0, 0, ifelse(year_offset > 0, 1, NA)))
return(BIRDx)
}
create_data_sensi <- function(offset2, BIRDx) {
off <- offset2
## Create an year offset for that species ------------------
BIRDx <- BIRDx %>%
# remove 20 ears before and after infestation
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested, 0)) %>%
filter(year_offset > -20 & year_offset < 20) %>%
# Only routes infested for at least 10 years
group_by(RouteId) %>%
mutate(max = max(year_offset)) %>%
filter(max > 9) %>%
ungroup() %>%
# year_offset is standardizing yrhwa to the offset (years after infestation to the impact) ADDING THE LAG
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + offset, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset <= 0, 0, ifelse(year_offset > 0, 1, NA)))
return(BIRDx)
}
create_data_perm <- function(offset2, BIRDin, perms) {
off <- offset2
inf_range <- BIRDin %>%
filter(Infested == T) %>%
select(Year)
inf_range <- c(min(inf_range$Year), max(inf_range$Year))
inf_dif <- inf_range[2] - inf_range[1]
res_tib1 <- as.list(matrix(NA, nrow = perms))
for(i in 1:perms) {
## Create an year offset for that species ------------------
BIRDx <- BIRDin %>%
group_by(RouteId) %>%
mutate(YearInfested =
ifelse(YearInfested != 0,
ceiling(runif(1, min(Year), max(Year))),
YearInfested)) %>%
ungroup() %>%
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + off, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset < off, 0, ifelse(year_offset >= off, 1, NA)),
Infested = ifelse(YearInfested >= Year, 1, 0))
rout_notinf <- BIRDx %>%
select(RouteId, Year, YearInfested, Infested) %>%
filter(YearInfested == 0) %>%
distinct() %>%
group_by(RouteId) %>%
mutate(maxYear = max(Year)) %>%
select(RouteId, maxYear) %>%
distinct()
## if a route was never infested, year_offset is 'equal' to the last year it was sampled
for(i in 1:nrow(BIRDx)){
if(BIRDx$YearInfested[i] == 0){
off_noin <- rout_notinf[which(rout_notinf$RouteId == BIRDx$RouteId[i]), 2]
BIRDx$year_offset[i] <- BIRDx$Year[i] - as.numeric(off_noin) + off - 1
}
}
## all filters ----------------------------
BIRDx1 <- BIRDx %>%
filter(YearInfested != 0,                               # only routes that were infested at some point
year_offset > -20 & year_offset < 20) %>%        # look only +-20 years before/after infestation
group_by(RouteId) %>%
group_split()
for(i in 1:length(BIRDx1)){                               # look only at routes that were infested for at least 10 years
a <- BIRDx1[[i]]
maxi <- max(a$year_offset)
if(maxi < 10) {BIRDx1[[i]] <- NULL }
}
BIRDx2_1 <- data.table::rbindlist(BIRDx1) %>%
as_tibble()
}
return(BIRDx2_1)
}
run_model <- function(BIRDx_sub, formula) {
model <- inla(formula, family="poisson", data=BIRDx_sub,
control.predictor=list(compute=TRUE),
control.compute=list(waic=TRUE, dic=TRUE, cpo=TRUE))
return(model)
}
run_sensi <- function(species, offsets) {
SPECIES_MOD_DAT <- glue("data/species/{species}.rds")
BIRDtab <- readRDS(SPECIES_MOD_DAT)
BIRDtab2 <- create_data_sensi(offsets, BIRDtab)
off <- offsets
routes <- BIRDtab2 %>% select(RouteId) %>% distinct() %>% arrange()
for(i in 1:nrow(routes)){
BIRDtab3 <- BIRDtab2[which(BIRDtab2$RouteId != as.character(routes[i,1])),]
resu <- run_model(BIRDtab3, formula)
name <- glue("{species}_model_{off}yrs_{routes[i,1]}")
assign(name, resu)
print(name)
name2 <- glue("data/models_res/{species}/sensi/{name}.rds", sep= "")
dir.create(glue("data/models_res/{species}/sensi"))
saveRDS(object = get(name), file = name2)
rm(resu)
rm(BIRDtab3)
}
}
run_perm <- function(species, perm, offsets) {
off <- offsets
perms <- perm
SPECIES_MOD_DAT <- glue("data/species/{species}.rds")
BIRDtab <- readRDS(SPECIES_MOD_DAT)
for(i in 1:perms){
BIRDtab2 <- create_data_perm(off, BIRDtab, perms[i])
resu <- run_model(BIRDtab2, formula)
name <- glue("{species}_model_{off}yrs_perm{i}")
assign(name, resu)
print(name)
name2 <- glue("data/models_res/{species}/perm/{name}.rds", sep= "")
#dir.create(glue("data/models_res/{species}"))
if (i == 1) {dir.create(glue("data/models_res/{species}/perm"))}
saveRDS(object = get(name), file = name2)
rm(resu)
rm(BIRDtab2)
rm(name)
}
}
run_sensi(species = species, offsets = 1)
run_sensi(species = species, offsets = 1)
# 7.5_Sensitivity and permutation test of the best model
# sensitivity is to remove each route at a time and re-fit the model
# permutation is to randomize the infestation year x times and refit the model
# Input: same as the 6_model:
#        /data/hexmap.graph
#        data/src/sps_list.csv
#        data/species/{species}.rds
#        5_formulasModels.R (sourcing)
# Output:
#        data/models_res/{species} (folder)
#        data/models_res/{species}/{name}.rds (files)
library(INLA)
library(tidyverse)
library(glue)
species <- "BHVI"
offsets <- 2
mod <- 1
set.seed(10)
SPECIES_DATA_PATH <- "data/src/sps_list.csv"
source("5_formulasModels.R")
sps_list <- read_csv(SPECIES_DATA_PATH)
hex.adj <- paste0(getwd(),"/data/hexmap.graph")
formula <- get(glue("formula{mod}"))
create_data_sensi <- function(offset2, BIRDx) {
off <- offset2
## Create an year offset for that species ------------------
BIRDx <- BIRDx %>%
# year_offset is standardizing yrhwa to the offset (years after infestation to the impact)
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + off, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset < off, 0, ifelse(year_offset >= off, 1, NA)))
rout_notinf <- BIRDx %>%
select(RouteId, Year, YearInfested, Infested) %>%
filter(YearInfested == 0) %>%
distinct() %>%
group_by(RouteId) %>%
mutate(maxYear = max(Year)) %>%
select(RouteId, maxYear) %>%
distinct()
## if a route was never infested, year_offset is 'equal' to the last year it was sampled
for(i in 1:nrow(BIRDx)){
if(BIRDx$YearInfested[i] == 0){
off_noin <- rout_notinf[which(rout_notinf$RouteId == BIRDx$RouteId[i]), 2]
BIRDx$year_offset[i] <- BIRDx$Year[i] - as.numeric(off_noin) + off - 1
}
}
## all filters ----------------------------
BIRDx1 <- BIRDx %>%
filter(YearInfested != 0,                               # only routes that were infested at some point
year_offset > -20 & year_offset < 20) %>%        # look only +-20 years before/after infestation
group_by(RouteId) %>%
group_split()
for(i in 1:length(BIRDx1)){                               # look only at routes that were infested for at least 10 years
a <- BIRDx1[[i]]
maxi <- max(a$year_offset)
if(maxi < 10) {BIRDx1[[i]] <- NULL }
}
BIRDx2_1 <- data.table::rbindlist(BIRDx1) %>%
as_tibble()
return(BIRDx2_1)
}
create_data_perm <- function(offset2, BIRDin, perms) {
off <- offset2
inf_range <- BIRDin %>%
filter(Infested == T) %>%
select(Year)
inf_range <- c(min(inf_range$Year), max(inf_range$Year))
inf_dif <- inf_range[2] - inf_range[1]
res_tib1 <- as.list(matrix(NA, nrow = perms))
for(i in 1:perms) {
## Create an year offset for that species ------------------
BIRDx <- BIRDin %>%
group_by(RouteId) %>%
mutate(YearInfested =
ifelse(YearInfested != 0,
ceiling(runif(1, min(Year), max(Year))),
YearInfested)) %>%
ungroup() %>%
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + off, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset < off, 0, ifelse(year_offset >= off, 1, NA)),
Infested = ifelse(YearInfested >= Year, 1, 0))
rout_notinf <- BIRDx %>%
select(RouteId, Year, YearInfested, Infested) %>%
filter(YearInfested == 0) %>%
distinct() %>%
group_by(RouteId) %>%
mutate(maxYear = max(Year)) %>%
select(RouteId, maxYear) %>%
distinct()
## if a route was never infested, year_offset is 'equal' to the last year it was sampled
for(i in 1:nrow(BIRDx)){
if(BIRDx$YearInfested[i] == 0){
off_noin <- rout_notinf[which(rout_notinf$RouteId == BIRDx$RouteId[i]), 2]
BIRDx$year_offset[i] <- BIRDx$Year[i] - as.numeric(off_noin) + off - 1
}
}
## all filters ----------------------------
BIRDx1 <- BIRDx %>%
filter(YearInfested != 0,                               # only routes that were infested at some point
year_offset > -20 & year_offset < 20) %>%        # look only +-20 years before/after infestation
group_by(RouteId) %>%
group_split()
for(i in 1:length(BIRDx1)){                               # look only at routes that were infested for at least 10 years
a <- BIRDx1[[i]]
maxi <- max(a$year_offset)
if(maxi < 10) {BIRDx1[[i]] <- NULL }
}
BIRDx2_1 <- data.table::rbindlist(BIRDx1) %>%
as_tibble()
}
return(BIRDx2_1)
}
run_model <- function(BIRDx_sub, formula) {
model <- inla(formula, family="poisson", data=BIRDx_sub,
control.predictor=list(compute=TRUE),
control.compute=list(waic=TRUE, dic=TRUE, cpo=TRUE))
return(model)
}
run_sensi <- function(species, offsets) {
SPECIES_MOD_DAT <- glue("data/species/{species}.rds")
BIRDtab <- readRDS(SPECIES_MOD_DAT)
BIRDtab2 <- create_data_sensi(offsets, BIRDtab)
off <- offsets
routes <- BIRDtab2 %>% select(RouteId) %>% distinct() %>% arrange()
for(i in 1:nrow(routes)){
BIRDtab3 <- BIRDtab2[which(BIRDtab2$RouteId != as.character(routes[i,1])),]
resu <- run_model(BIRDtab3, formula)
name <- glue("{species}_model_{off}yrs_{routes[i,1]}")
assign(name, resu)
print(name)
name2 <- glue("data/models_res/{species}/sensi/{name}.rds", sep= "")
dir.create(glue("data/models_res/{species}/sensi"))
saveRDS(object = get(name), file = name2)
rm(resu)
rm(BIRDtab3)
}
}
run_perm <- function(species, perm, offsets) {
off <- offsets
perms <- perm
SPECIES_MOD_DAT <- glue("data/species/{species}.rds")
BIRDtab <- readRDS(SPECIES_MOD_DAT)
for(i in 1:perms){
BIRDtab2 <- create_data_perm(off, BIRDtab, perms[i])
resu <- run_model(BIRDtab2, formula)
name <- glue("{species}_model_{off}yrs_perm{i}")
assign(name, resu)
print(name)
name2 <- glue("data/models_res/{species}/perm/{name}.rds", sep= "")
#dir.create(glue("data/models_res/{species}"))
if (i == 1) {dir.create(glue("data/models_res/{species}/perm"))}
saveRDS(object = get(name), file = name2)
rm(resu)
rm(BIRDtab2)
rm(name)
}
}
run_sensi(species = species, offsets = 1)
run_perm(species = species, perm = 1, offsets = 1)
