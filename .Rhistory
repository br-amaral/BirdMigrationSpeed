pred_tab14 <- create_pred_off(14)
pred_tab15 <- create_pred_off(15)
pred_tab16 <- create_pred_off(16)
pred_tab_name <- glue("pred_tab{year_}")
plot.pred(off = year_, pars_tib = my_tibble2, pred_tabX = get(pred_tab_name), temp = temp, max = max, temp_n = temp_n)
}
pred_tab15 <- create_pred_off(15)
predict.inla2 <- function(species, modelN, temp, max, temp_n) {
my_tibble2 <- my_tibble %>%
filter(species == species,
model == modelN) %>%
select(species,
model,
offset = year,
intercept,
year_off_t = year_offset,
infoff,
temp_min_scale,
year_offset_infoff,
year_offset_temp_min_scale,
infoff_temp_min_scale,
year_offset_infoff_temp_min_scale,
NewObserver)
pred_tab2 <- create_pred_off(2)
pred_tab3 <- create_pred_off(3)
pred_tab4 <- create_pred_off(4)
pred_tab5 <- create_pred_off(5)
pred_tab6 <- create_pred_off(6)
pred_tab7 <- create_pred_off(7)
pred_tab8 <- create_pred_off(8)
pred_tab9 <- create_pred_off(9)
pred_tab10 <- create_pred_off(10)
pred_tab11 <- create_pred_off(11)
pred_tab12 <- create_pred_off(12)
pred_tab13 <- create_pred_off(13)
pred_tab14 <- create_pred_off(14)
pred_tab15 <- create_pred_off(15)
pred_tab16 <- create_pred_off(16)
pred_tab_name <- glue("pred_tab{year_}")
plot.pred(off = year_, pars_tib = my_tibble2, pred_tabX = get(pred_tab_name), temp = temp, max = max, temp_n = temp_n)
}
plot.pred <- function(off, pars_tib, pred_tabX, temp, max, temp_n){
pars_tib <- pars_tib %>%
filter(offset == off)
if(nrow(pars_tib) != 1) {stop("oooppsssss error row 19 extracting model pars")}
# mean -----------
ifelse(!is.na(pars_tib$intercept[[1]][1]), b0 <- pars_tib$intercept[[1]][1], b0 <- 0)
ifelse(!is.na(pars_tib$year_off_t[[1]][1]), b1 <- pars_tib$year_off_t[[1]][1], b1 <- 0)
ifelse(!is.na(pars_tib$infoff[[1]][1]), b2 <- pars_tib$infoff[[1]][1], b2 <- 0)
ifelse(!is.na(pars_tib$temp_min_scale[[1]][1]), b3 <- pars_tib$temp_min_scale[[1]][1], b3 <- 0)
ifelse(!is.na(pars_tib$year_offset_infoff[[1]][1]), b4 <- pars_tib$year_offset_infoff[[1]][1], b4 <- 0)
ifelse(!is.na(pars_tib$year_offset_temp_min_scale[[1]][1]), b5 <- pars_tib$year_offset_temp_min_scale[[1]][1], b5 <- 0)
ifelse(!is.na(pars_tib$infoff_temp_min_scale[[1]][1]), b6 <- pars_tib$infoff_temp_min_scale[[1]][1], b6 <- 0)
ifelse(!is.na(pars_tib$year_offset_infoff_temp_min_scale[[1]][1]), b7 <- pars_tib$year_offset_infoff_temp_min_scale[[1]][1], b7 <- 0)
ifelse(!is.na(pars_tib$NewObserver[[1]][1]), b8 <- pars_tib$NewObserver[[1]][1], b8 <- 0)
pred_tabX <- pred_tabX %>%
mutate(temp_t = temp)
no_infes <- pred_tabX %>%
mutate(prediction = exp(
b0 + (b1 * year_off_t) + (b3 * temp_t) +
(b5 * year_off_t * temp_t)),
HWA = 'infest'
)
infes <- pred_tabX %>%
mutate(prediction = exp(
b0 + (b1 * year_off_t) + (b2 * infoff_t) + (b3 * temp_t) +
(b4 * year_off_t * infoff_t) + (b5 * year_off_t * temp_t) +
(b6 * infoff_t * temp_t) + (b7 * year_off_t * infoff_t * temp_t)),
HWA = 'no_infest'
)
# up
b0u <- pars_tib$intercept[[1]][3]
b1u <- pars_tib$year_off_t[[1]][3]
b2u <- pars_tib$infoff[[1]][3]
b3u <- pars_tib$temp_min_scale[[1]][3]
b4u <- pars_tib$year_offset_infoff[[1]][3]
b5u <- pars_tib$year_offset_temp_min_scale[[1]][3]
b6u <- pars_tib$infoff_temp_min_scale[[1]][3]
b7u <- pars_tib$year_offset_infoff_temp_min_scale[[1]][3]
b8u <- pars_tib$NewObserver[[1]][3]
no_infes <- no_infes %>%
mutate(predictionU = exp(
b0u + (b1u * year_off_t) + (b3u * temp_t) +
(b5u * year_off_t * temp_t)),
HWA = 'infest'
)
infes <- infes %>%
mutate(predictionU = exp(
b0u + (b1u * year_off_t) + (b2u * infoff_t) + (b3u * temp_t) +
(b4u * year_off_t * infoff_t) + (b5u * year_off_t * temp_t) +
(b6u * infoff_t * temp_t) + (b7u * year_off_t * infoff_t * temp_t)),
HWA = 'no_infest'
)
# low -----------------
b0l <- pars_tib$intercept[[1]][2]
b1l <- pars_tib$year_off_t[[1]][2]
b2l <- pars_tib$infoff[[1]][2]
b3l <- pars_tib$temp_min_scale[[1]][2]
b4l <- pars_tib$year_offset_infoff[[1]][2]
b5l <- pars_tib$year_offset_temp_min_scale[[1]][2]
b6l <- pars_tib$infoff_temp_min_scale[[1]][2]
b7l <- pars_tib$year_offset_infoff_temp_min_scale[[1]][2]
b8l <- pars_tib$NewObserver[[1]][2]
no_infes <- no_infes %>%
mutate(predictionL = exp(
b0l + (b1l * year_off_t) + (b3l * temp_t) +
(b5l * year_off_t * temp_t)),
HWA = 'infest'
)
infes <- infes %>%
mutate(predictionL = exp(
b0l + (b1l * year_off_t) + (b2l * infoff_t) + (b3l * temp_t) +
(b4l * year_off_t * infoff_t) + (b5l * year_off_t * temp_t) +
(b6l * infoff_t * temp_t) + (b7l * year_off_t * infoff_t * temp_t)),
HWA = 'no_infest'
)
# ---------
plot_preds <- rbind(no_infes, infes)
off_gap <- infes %>%
filter(year %in% c(off, off+1))
plot_preds <- plot_preds %>%
filter(!(HWA == 'no_infest' & year_off_t < 0)) %>%
arrange(desc(HWA))
write_csv(plot_preds, file = glue("data/models_resnew/{spsr}/{spsr}_{temp_n}preds.csv"))
coefs <- as_tibble(cbind(rbind('b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8'),
rbind('intercept','year_off_t', 'infoff','temp_min_scale',
'year_offset_infoff','year_offset_temp_min_scale','infoff_temp_min_scale',
'year_offset_infoff_temp_min_scale','NewObserver'),
rbind(b0, b1, b2, b3, b4, b5, b6, b7, b8),
rbind(b0l, b1l, b2l, b3l, b4l, b5l, b6l, b7l, b8l),
rbind(b0u, b1u, b2u, b3u, b4u, b5u, b6u, b7u, b8u)))
colnames(coefs) <- c("betas","coef_name","mean","low","up")
coefs$mean <- as.numeric(coefs$mean)
coefs$low <- as.numeric(coefs$low)
coefs$up <- as.numeric(coefs$up)
coefs <- rbind(coefs,
c("mod_year", pull(species), as.numeric(mod_), as.numeric(year_), NA))
write_csv(coefs, file = glue("data/{spsr}_coefs.csv"))
ggplot(aes(x = year, y = prediction, col = HWA), data = plot_preds) +
geom_line(size = 0.8) +
#geom_line(aes(x = year, y = prediction), data = off_gap,
#          col = 'white', size=2, alpha=1) +
geom_vline(xintercept = 0, size=0.8, color = "gray43") +
geom_vline(xintercept = off, linetype="dotted", color = "gray43", size=0.8) +
geom_point(size = 1.5) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#axis.text = element_text(size= 16),
#axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
#axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
#legend.title = element_text(size = 18),
#legend.text = element_text(size = 16),
legend.position = "none",
#axis.title = element_text(size = 16)
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
#xlab("Years since HWA infestation") +
#ylab("Bird Abundance") +
scale_x_continuous(breaks = c(-10,-5,0,5,10,15,20)) +
ylim(0, max) +
scale_colour_manual("legend",
values = c("no_infest" = "gray82", "infest" = "gray28"),
labels = c("Not infested", "Infested"))
# confidence interval
#geom_line(aes(x = year, y = predictionL, col = HWA), data = plot_preds) +
#geom_line(aes(x = year, y = predictionU, col = HWA), data = plot_preds)
}
limits <- c(2, 1.6, 2, 3, 0.7, 0.5, 1, 6,
4, 0.4, 21, 8.5, 16, 0.5, 35)
maxi <- limits[i]
a <- predict.inla2(spsr, mod_, t1, maxi, temp_n = "t1")
b <- predict.inla2(spsr, mod_, t2, maxi, temp_n = "t2")
c <- predict.inla2(spsr, mod_, t3, maxi, temp_n = "t3")
grid.arrange(a, b, c, ncol = 3)
off
off = year_
pars_tib = my_tibble2
species
modelN
model
mod_
modelN <- 3
temp
predict.inla2 <- function(species, modelN, temp, max, temp_n) {
my_tibble2 <- my_tibble %>%
filter(species == species,
model == modelN) %>%
select(species,
model,
offset = year,
intercept,
year_off_t = year_offset,
infoff,
temp_min_scale,
year_offset_infoff,
year_offset_temp_min_scale,
infoff_temp_min_scale,
year_offset_infoff_temp_min_scale,
NewObserver)
pred_tab2 <- create_pred_off(2)
pred_tab3 <- create_pred_off(3)
pred_tab4 <- create_pred_off(4)
pred_tab5 <- create_pred_off(5)
pred_tab6 <- create_pred_off(6)
pred_tab7 <- create_pred_off(7)
pred_tab8 <- create_pred_off(8)
pred_tab9 <- create_pred_off(9)
pred_tab10 <- create_pred_off(10)
pred_tab11 <- create_pred_off(11)
pred_tab12 <- create_pred_off(12)
pred_tab13 <- create_pred_off(13)
pred_tab14 <- create_pred_off(14)
pred_tab15 <- create_pred_off(15)
pred_tab16 <- create_pred_off(16)
pred_tab_name <- glue("pred_tab{year_}")
plot.pred(off = year_, pars_tib = my_tibble2, pred_tabX = get(pred_tab_name), temp = temp, max = max, temp_n = temp_n)
}
max
temp = t2
temp_n = "t2"
my_tibble2 <- my_tibble %>%
filter(species == species,
model == modelN) %>%
select(species,
model,
offset = year,
intercept,
year_off_t = year_offset,
infoff,
temp_min_scale,
year_offset_infoff,
year_offset_temp_min_scale,
infoff_temp_min_scale,
year_offset_infoff_temp_min_scale,
NewObserver)
pred_tab2 <- create_pred_off(2)
pred_tab3 <- create_pred_off(3)
pred_tab4 <- create_pred_off(4)
pred_tab5 <- create_pred_off(5)
pred_tab6 <- create_pred_off(6)
pred_tab7 <- create_pred_off(7)
pred_tab8 <- create_pred_off(8)
pred_tab9 <- create_pred_off(9)
pred_tab10 <- create_pred_off(10)
pred_tab11 <- create_pred_off(11)
pred_tab12 <- create_pred_off(12)
pred_tab13 <- create_pred_off(13)
pred_tab14 <- create_pred_off(14)
pred_tab15 <- create_pred_off(15)
pred_tab16 <- create_pred_off(16)
pred_tab_name <- glue("pred_tab{year_}")
off = year_
pars_tib = my_tibble2
pred_tabX = get(pred_tab_name)
temp = temp
pars_tib <- pars_tib %>%
filter(offset == off)
if(nrow(pars_tib) != 1) {stop("oooppsssss error row 19 extracting model pars")}
# mean -----------
ifelse(!is.na(pars_tib$intercept[[1]][1]), b0 <- pars_tib$intercept[[1]][1], b0 <- 0)
ifelse(!is.na(pars_tib$year_off_t[[1]][1]), b1 <- pars_tib$year_off_t[[1]][1], b1 <- 0)
ifelse(!is.na(pars_tib$infoff[[1]][1]), b2 <- pars_tib$infoff[[1]][1], b2 <- 0)
ifelse(!is.na(pars_tib$temp_min_scale[[1]][1]), b3 <- pars_tib$temp_min_scale[[1]][1], b3 <- 0)
ifelse(!is.na(pars_tib$year_offset_infoff[[1]][1]), b4 <- pars_tib$year_offset_infoff[[1]][1], b4 <- 0)
ifelse(!is.na(pars_tib$year_offset_temp_min_scale[[1]][1]), b5 <- pars_tib$year_offset_temp_min_scale[[1]][1], b5 <- 0)
ifelse(!is.na(pars_tib$infoff_temp_min_scale[[1]][1]), b6 <- pars_tib$infoff_temp_min_scale[[1]][1], b6 <- 0)
ifelse(!is.na(pars_tib$year_offset_infoff_temp_min_scale[[1]][1]), b7 <- pars_tib$year_offset_infoff_temp_min_scale[[1]][1], b7 <- 0)
ifelse(!is.na(pars_tib$NewObserver[[1]][1]), b8 <- pars_tib$NewObserver[[1]][1], b8 <- 0)
pred_tabX <- pred_tabX %>%
mutate(temp_t = temp)
no_infes <- pred_tabX %>%
mutate(prediction = exp(
b0 + (b1 * year_off_t) + (b3 * temp_t) +
(b5 * year_off_t * temp_t)),
HWA = 'infest'
)
infes <- pred_tabX %>%
mutate(prediction = exp(
b0 + (b1 * year_off_t) + (b2 * infoff_t) + (b3 * temp_t) +
(b4 * year_off_t * infoff_t) + (b5 * year_off_t * temp_t) +
(b6 * infoff_t * temp_t) + (b7 * year_off_t * infoff_t * temp_t)),
HWA = 'no_infest'
)
# up
b0u <- pars_tib$intercept[[1]][3]
max = maxi
# up
b0u <- pars_tib$intercept[[1]][3]
b1u <- pars_tib$year_off_t[[1]][3]
b2u <- pars_tib$infoff[[1]][3]
b3u <- pars_tib$temp_min_scale[[1]][3]
b4u <- pars_tib$year_offset_infoff[[1]][3]
b5u <- pars_tib$year_offset_temp_min_scale[[1]][3]
b6u <- pars_tib$infoff_temp_min_scale[[1]][3]
b7u <- pars_tib$year_offset_infoff_temp_min_scale[[1]][3]
b8u <- pars_tib$NewObserver[[1]][3]
no_infes <- no_infes %>%
mutate(predictionU = exp(
b0u + (b1u * year_off_t) + (b3u * temp_t) +
(b5u * year_off_t * temp_t)),
HWA = 'infest'
)
infes <- infes %>%
mutate(predictionU = exp(
b0u + (b1u * year_off_t) + (b2u * infoff_t) + (b3u * temp_t) +
(b4u * year_off_t * infoff_t) + (b5u * year_off_t * temp_t) +
(b6u * infoff_t * temp_t) + (b7u * year_off_t * infoff_t * temp_t)),
HWA = 'no_infest'
)
# low -----------------
b0l <- pars_tib$intercept[[1]][2]
b1l <- pars_tib$year_off_t[[1]][2]
b2l <- pars_tib$infoff[[1]][2]
b3l <- pars_tib$temp_min_scale[[1]][2]
b4l <- pars_tib$year_offset_infoff[[1]][2]
b5l <- pars_tib$year_offset_temp_min_scale[[1]][2]
b6l <- pars_tib$infoff_temp_min_scale[[1]][2]
b7l <- pars_tib$year_offset_infoff_temp_min_scale[[1]][2]
b8l <- pars_tib$NewObserver[[1]][2]
no_infes <- no_infes %>%
mutate(predictionL = exp(
b0l + (b1l * year_off_t) + (b3l * temp_t) +
(b5l * year_off_t * temp_t)),
HWA = 'infest'
)
infes <- infes %>%
mutate(predictionL = exp(
b0l + (b1l * year_off_t) + (b2l * infoff_t) + (b3l * temp_t) +
(b4l * year_off_t * infoff_t) + (b5l * year_off_t * temp_t) +
(b6l * infoff_t * temp_t) + (b7l * year_off_t * infoff_t * temp_t)),
HWA = 'no_infest'
)
# ---------
plot_preds <- rbind(no_infes, infes)
plot_preds
plot_preds %>% view()
sps_preds3 %>% filter(species == "MAWA", temp = "t2")
sps_preds3 %>% filter(species == "MAWA", temp == "t2")
sps_preds2 %>% filter(species == "MAWA", temp == "t2")
sps_list
i <- 5
library(tidyverse)
library(gridExtra)
library(glue)
SPECIES_DATA_PATH <- "data/src/sps_list.csv"
sps_list <- read_csv(SPECIES_DATA_PATH)
species <- spsr <- sps_list[i,1]
SUM_RES_PATH <- glue("data/models_resnew/{species}/summary_results2.rds")
# Make predictions with the fixed values and temperature quantiles
summary_results2 <- my_tibble <- read_rds(SUM_RES_PATH)
(waic_best <- summary_results2[which(summary_results2$waic == min(summary_results2$waic)),1:4])
year_ <- waic_best$year[1]
mod_ <- waic_best$model[1]
pred_tab <- as_tibble(seq(-10,20,1)) %>%
rename(year = value)
create_pred_off <- function(offset_v){
pred_tabX <- pred_tab %>%
mutate(infoff_t =  ifelse(year <= offset_v, 0, 1),
year_off_t = year - offset_v)
return(pred_tabX)
}
offset <- year_
SPECIES_MOD_DAT <- glue("data/species/{species}.rds")
BIRDtab <- readRDS(SPECIES_MOD_DAT)
BIRDx <- BIRDtab %>%
# remove 20 ears before and after infestation
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested, 0)) %>%
filter(year_offset > -20 & year_offset < 20) %>%
# Only routes infested for at least 10 years
group_by(RouteId) %>%
mutate(max = max(year_offset)) %>%
filter(max > 9) %>%
ungroup() %>%
# year_offset is standardizing yrhwa to the offset (years after infestation to the impact) ADDING THE LAG
mutate(year_offset = ifelse(YearInfested != 0, Year - YearInfested + offset, 0),
# infoff: 'infested' route according to the delay in the effect (offset)
infoff = ifelse(year_offset <= 0, 0, ifelse(year_offset > 0, 1, NA)))
ggplot(BIRDx, aes(x = year_offset, y = SpeciesTotal, colour = Infested)) +
geom_point() +
geom_smooth(aes(fill = Infested)) +
ggtitle("-20 e +20 filtro") +
theme_bw()
ggplot(BIRDx, aes(x = year_offset, y = SpeciesTotal)) +
#  geom_point() +
geom_smooth() +
ggtitle(species) + xlim(-20,20)
sps_preds2 <- sps_preds %>%
filter(year == 20)
sps_preds2$prop <- NA
sps_preds2$propper <- NA
sps_preds2 <- sps_preds %>%
filter(year == 20)
sps_preds2$prop <- NA
sps_preds2$propper <- NA
for(i in seq(from=1, to=nrow(sps_preds2), by=2)) {
sps_preds2$prop[i] <- sps_preds2$prop[i+1] <- log(sps_preds2$prediction[i]/sps_preds2$prediction[i+1])
sps_preds2$propper[i] <- sps_preds2$propper[i+1] <- (sps_preds2$prediction[i] - sps_preds2$prediction[i+1])/sps_preds2$prediction[i+1]
}
sps_preds3 <- sps_preds2 %>%
filter(HWA == "infest")   ## get only a copy from prop
View(sps_preds3)
View(sps_preds2)
?gam
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/BirdMigrationSpeed")
library(mgcv)
library(tidyverse)
library(ggplot2)
library(dplyr)
final3 <- read_rds("final3.rds")
model_lag <- read_rds("model_lag.rds")
final3 <- read_rds("final3.rds")
model_lag <- read_rds("model_lag.rds")
mod_lag <- read_rds("mod_lag.rds")
summary(mod_lag)
?plot_smooth
mod_lag
# ?plot_smooth
plot_smooth(mod_lag, view = "past_spe_z")
library(mgcv)
library(tidyverse)
library(ggplot2)
library(dplyr)
# ?plot_smooth
plot_smooth(mod_lag, view = "past_spe_z")
effect_plot(mod_lag)
library(jtools)
effect_plot(mod_lag)
effect_plot(mod_lag, pred = "past_spe_z")
# ?plot_smooth
mod_gu <- mgcv::gam(data = final3 %>% mutate(species = as.factor(species),
cell = as.factor(cell),
#mig_cell = abs(mig_cell - 1),
mig_cell = as.factor(mig_cell)),
log(vArrMag) ~ (AnomDGr + AnomVGr) * mig_cell +
s(species, bs = "re") +
s(year, bs = "re") +
s(cell_lat, bs = "tp") +
s(cell, bs = "re"),
method = "REML")
final <- read_rds("final.rds")
# ?plot_smooth
mod_gu <- mgcv::gam(data = final %>% mutate(species = as.factor(species),
cell = as.factor(cell),
#mig_cell = abs(mig_cell - 1),
mig_cell = as.factor(mig_cell)),
log(vArrMag) ~ (AnomDGr + AnomVGr) * mig_cell +
s(species, bs = "re") +
s(year, bs = "re") +
s(cell_lat, bs = "tp") +
s(cell, bs = "re"),
method = "REML")
plot_smooth(mod_lag, view = "AnomDGr")
library(itsadug)
plot_smooth(mod_lag, view = "AnomDGr")
plot_smooth(mod_gu, view = "AnomDGr")
effect_plot(mod_gu, pred = "AnomDGr")
?effect_plot
effect_plot(mod_gu, pred = "AnomDGr", interval = T)
plot_smooth(mod_gu, view = "AnomDGr")
####
xrng <- list(AnomDGr = range(final$AnomDGr),
AnomVGr = range(final$AnomVGr))
inc.seq <- seq(xrng$AnomDGr[1], xrng$AnomDGr[2], length.out = 25)
xrng$AnomDGr
final$AnomDGr
range(final$AnomDGr)
####
xrng <- list(AnomDGr = range(final$AnomDGr, na.rm = T),
AnomVGr = range(final$AnomVGr, na.rm = T))
xrng
inc.seq <- seq(xrng$AnomDGr[1], xrng$AnomDGr[2], length.out = 25)
edu.seq <- seq(xrng$AnomVGr[1], xrng$AnomVGr[2], length.out = 25)
# main effect of income
newdata <- data.frame(AnomDGr = inc.seq, AnomVGr = mean(final$AnomVGr))
yhat.inc <- predict(mod_gu, newdata = newdata, se.fit = TRUE)
plotci(inc.seq, yhat.inc$fit, yhat.inc$se.fit)
xrng
inc.seq
####
xrng <- list(AnomDGr = range(final$AnomDGr, na.rm = T),
AnomVGr = range(final$AnomVGr, na.rm = T),
mig_cell = as.factor(c(T,F)))
xrng
newdata
# main effect of income
newdata <- data.frame(AnomDGr = inc.seq,
AnomVGr = mean(final$AnomVGr, na.rm = T),
mig_cell = as.factor(c(T,F)))
newdata <- rbind(new.data,
data.frame(AnomDGr = inc.seq,
AnomVGr = mean(final$AnomVGr, na.rm = T),
mig_cell = as.factor(rep(T,25))))
# main effect of income
newdata <- data.frame(AnomDGr = inc.seq,
AnomVGr = mean(final$AnomVGr, na.rm = T),
mig_cell = as.factor(rep(F,25)))
newdata <- rbind(new.data,
data.frame(AnomDGr = inc.seq,
AnomVGr = mean(final$AnomVGr, na.rm = T),
mig_cell = as.factor(rep(T,25))))
newdata <- rbind(newdata,
data.frame(AnomDGr = inc.seq,
AnomVGr = mean(final$AnomVGr, na.rm = T),
mig_cell = as.factor(rep(T,25))))
newdata
yhat.inc <- predict(mod_gu, newdata = newdata, se.fit = TRUE)
yhat.inc
yhat.inc <- predict(mod_gu, newdata = newdata, se.fit = TRUE, re.form=~0)
?predict
yhat.inc <- predict(mod_gu, newdata = newdata, se.fit = TRUE, re.form=NA)
yhat.inc <- predict(mod_gu, newdata = newdata, se.fit = TRUE, re.form=NA)
